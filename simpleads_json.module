<?php

/**
 * @file
 * 
 * Provides JSON data on SimpleAds.
 */

/**
 * Implements hook_permission
 */
function simpleads_json_permission() {
  return array(
    // Permission for setting SimpleAds JSON access key.
    'simpleads_json accesskey' => array(
      'title' => t('Administer SimpleAds JSON'),
      'description' => t('Perform administration task for SimpleAds JSON'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function simpleads_json_menu() {
  return array(
    // Menu for JSON output.
    'simpleads/json' => array(
      'page callback' => 'simpleads_json_output',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    // Menu for SimpleAds JSON configuration page.
    'admin/config/services/simpleads-json' => array(
      'title' => 'SimpleAds JSON',
      'description' => 'SimpleAds JSON configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simpleads_json_admin_config_form'),
      'access arguments' => array('simpleads_json accesskey'),
      'file' => 'simpleads_json.admin.inc',
      'file path' => drupal_get_path('module', 'simpleads_json') . '/includes/',
    ),
  );
}

/**
 * Page Callback.
 * 
 * @return type json mixed
 *   JSON result related to query
 */
function simpleads_json_output() {
  
  // Check if key is set or key matches to our key else return access denied page.
  if (!isset($_GET['key']) || 
      $_GET['key'] != variable_get('simpleads_json_key')) {
     return MENU_ACCESS_DENIED;
  }

  // Variable for storing JSON result.
  $output = '';
  
  // Save the request value in array.
  $data = array(
    'start' => isset($_GET['start']) ? $_GET['start'] : '',
    'end' => isset($_GET['end']) ? $_GET['end'] : '',
  );
  
  // Check if date is in correct format.
  $valid = (isset($_GET['start']) && _simpleads_json_check_format($data))
      ? TRUE : FALSE;
  
  switch ($valid) {
    // If date format is correct.
    case TRUE:
      // Send out the result we obtain from query.
      $output = drupal_json_output(_simpleads_json_query_result($data));
      break;
    // If date format is incorrect.
    case FALSE:
        // Send out invalid request in JSON.
        $output = drupal_json_output(array('error' => 'invalid request',));
      break;
  }
  
  // Final result to be displayed on page.
  return $output;
}

/**
 * Check supplied date format.
 * 
 * @param type $date array mixed
 *  contains start date and probably end date.
 * 
 * @return type boolean
 *   - TRUE
 *      if date format is correct.
 *   - FALSE
 *      if date format is incorrect. 
 */
function _simpleads_json_check_format($date) {
 
  return ($date['end'] != '') ? 
    ((((DateTime::createFromFormat('Y-m-d', $date['start']) !== FALSE)
      && DateTime::createFromFormat('Y-m-d', $date['end']) !== FALSE)) ?
        TRUE : FALSE) : 
    ((DateTime::createFromFormat('Y-m-d', $date['start']) !== FALSE) ?
      TRUE : FALSE);
}

/**
 * Returns the fetched query from database.
 * 
 * @param type $date array mixed
 *   start date and probably end date 
 * 
 * @return type array mixed
 *   an array contaning information on published ads.
 */
function _simpleads_json_query_result($date) {
  
  $node = array('title', 'nid', 'status');
  
  $field_ad_date = array('field_ad_date_value', 'field_ad_date_value2');
  
  $query = db_select('node', 'n');
  $query->join('field_data_field_ad_date', 'd', 'n.nid = d.entity_id');
  $query->fields('n', $node)
      ->fields('d', $field_ad_date)
      ->condition('d.field_ad_date_value', $date['start'], '>=');
  if($date['end'] != '') {
    $query->condition('d.field_ad_date_value2', $date['end'], '<=');
  }
  $query->orderBy('n.nid');
  
  return $query->execute()->fetchall();
}